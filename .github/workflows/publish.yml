name: release
run-name: "[release] ${{ github.ref_name }}"

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    uses: ./.github/workflows/build.yml
    with:
      release: true
    secrets:
      GRADLE_SIGNING_KEY: ${{ secrets.GRADLE_SIGNING_KEY }}
      GRADLE_SIGNING_PASSWORD: ${{ secrets.GRADLE_SIGNING_PASSWORD }}

  publish-github:
    runs-on: ubuntu-24.04
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Read version
      id: version
      run: echo "VERSION=$(cat manual/version.txt | tr -d '\n')" >> $GITHUB_OUTPUT

    - name: Download web artifacts
      uses: actions/download-artifact@v4
      with:
        name: web
        path: artifacts/web

    - name: Download pdf artifacts
      uses: actions/download-artifact@v4
      with:
        name: pdf
        path: artifacts/pdf

    - name: Download cs artifacts
      uses: actions/download-artifact@v4
      with:
        name: cs
        path: artifacts/cs

    - name: Download py artifacts
      uses: actions/download-artifact@v4
      with:
        name: py
        path: artifacts/py

    - name: Download rs artifacts
      uses: actions/download-artifact@v4
      with:
        name: rs
        path: artifacts/rs

    - name: Download ts artifacts
      uses: actions/download-artifact@v4
      with:
        name: ts
        path: artifacts/ts

    - name: Download go artifacts
      uses: actions/download-artifact@v4
      with:
        name: go
        path: artifacts/go

    - name: Download r artifacts
      uses: actions/download-artifact@v4
      with:
        name: r
        path: artifacts/r

    - name: Download kt artifacts
      uses: actions/download-artifact@v4
      with:
        name: kt
        path: artifacts/kt

    - name: Create zip archives
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        cd artifacts
        zip -r "../web-v${VERSION}.zip" web
        zip -r "../cs-v${VERSION}.zip" cs
        zip -r "../py-v${VERSION}.zip" py
        zip -r "../rs-v${VERSION}.zip" rs
        zip -r "../ts-v${VERSION}.zip" ts
        zip -r "../go-v${VERSION}.zip" go
        zip -r "../r-v${VERSION}.zip" r
        zip -r "../kt-v${VERSION}.zip" kt
        cd ..
        zip -r "tests-v${VERSION}.zip" tests
        zip -r "sim-v${VERSION}.zip" sim

    - name: Add version suffix to documentation files
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        cp artifacts/web/pragmastat.md artifacts/web/pragmastat-v${VERSION}.md
        cp artifacts/web/pragmastat.pdf artifacts/web/pragmastat-v${VERSION}.pdf

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ github.ref_name }}
        discussion_category_name: Releases
        generate_release_notes: true
        files: |
          web-v*.zip
          artifacts/web/pragmastat-v*.md
          artifacts/web/pragmastat-v*.pdf
          cs-v*.zip
          py-v*.zip
          rs-v*.zip
          ts-v*.zip
          go-v*.zip
          r-v*.zip
          kt-v*.zip
          tests-v*.zip
          sim-v*.zip

  publish-web:
    runs-on: ubuntu-24.04
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Download web artifacts
      uses: actions/download-artifact@v4
      with:
        name: web
        path: web/public

    - name: Disable Jekyll
      run: touch web/public/.nojekyll

    - name: Deploy
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: pragmastat-dev
        folder: web/public
        git-config-name: Andrey Akinshin
        git-config-email: andrey.akinshin@gmail.com
        commit-message: 'Deploy ${{ github.ref_name }}'
        clean: true

  publish-cs:
    runs-on: ubuntu-24.04
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '9.0.305'

    - name: Download cs artifacts
      uses: actions/download-artifact@v4
      with:
        name: cs
        path: cs/artifacts

    - name: Publish to NuGet
      run: dotnet nuget push ./cs/artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  publish-py:
    runs-on: ubuntu-24.04
    needs: build
    permissions:
      id-token: write  # Required for trusted publishing to PyPI
    steps:
    - name: Download py artifacts
      uses: actions/download-artifact@v4
      with:
        name: py
        path: dist/

    - name: Remove platform-specific wheels
      run: rm -f dist/*.whl

    - name: Publish to PyPI (source distribution only)
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-npm:
    runs-on: ubuntu-24.04
    needs: build
    permissions:
      id-token: write  # Required for npm provenance
      contents: read
    steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'

    - name: Download ts artifacts
      uses: actions/download-artifact@v4
      with:
        name: ts
        path: ts/

    - name: Publish to npm
      run: npm publish *.tgz --access public --provenance
      working-directory: ts
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-rs:
    runs-on: ubuntu-24.04
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Download rs artifacts
      uses: actions/download-artifact@v4
      with:
        name: rs
        path: rs/pragmastat/target/package

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      working-directory: rs/pragmastat

  publish-kt:
    runs-on: ubuntu-24.04
    needs: build
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      continue-on-error: true
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Download kt artifacts
      uses: actions/download-artifact@v4
      with:
        name: kt
        path: kt/build/

    # Deploy to Maven Central using JReleaser Portal Publisher API
    # Documentation: https://jreleaser.org/guide/latest/examples/maven/maven-central.html#_portal_publisher_api
    - name: Deploy to Maven Central via JReleaser
      run: ./gradlew jreleaserDeploy
      working-directory: kt
      env:
        JRELEASER_MAVENCENTRAL_SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        JRELEASER_MAVENCENTRAL_SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.GRADLE_SIGNING_PASSWORD }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.GRADLE_SIGNING_KEY }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GRADLE_SIGNING_PUBLIC_KEY }}
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build reports on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: kt-build-reports
        path: kt/build/reports/
