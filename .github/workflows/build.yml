name: build
run-name: "[build] ${{ github.event.head_commit.message }}"

on:
  pull_request:
  push:
    branches:
      - '**'
  workflow_dispatch:
  workflow_call:
    inputs:
      release:
        description: 'Build in release mode'
        type: boolean
        default: false
    secrets:
      GRADLE_SIGNING_KEY:
        required: false
      GRADLE_SIGNING_PASSWORD:
        required: false

jobs:
  build-img:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: img

    - name: Generate images
      run: ./img/build.sh build

    - name: Upload image artifacts
      uses: actions/upload-artifact@v4
      with:
        name: img
        path: img/

  build-pdf:
    needs: build-img
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Download image artifacts
      uses: actions/download-artifact@v4
      with:
        name: img
        path: img/

    - name: Generate auxiliary files
      run: ./build.sh gen ${{ inputs.release && '--release' || '' }}

    - name: Install LaTeX packages and build PDF
      uses: docker://pandoc/latex:3.7
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}
        RELEASE_FLAG: ${{ inputs.release && '--release' || '' }}
      with:
        entrypoint: /bin/sh
        args: -c "set -euo pipefail && tlmgr --version && tlmgr update --self && tlmgr install pgf caption textpos mdframed zref needspace csquotes multirow wrapfig colortbl pdflscape tabu varwidth threeparttable threeparttablex environ trimspaces ulem makecell biblatex logreq biber fvextra upquote lineno && cd \"$GITHUB_WORKSPACE/pdf\" && sh ./build.sh build $RELEASE_FLAG"

    - name: Upload pdf artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pdf
        path: pdf/*.pdf

  build-web:
    needs: [build-img, build-pdf]
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Download image artifacts
      uses: actions/download-artifact@v4
      with:
        name: img
        path: img/

    - name: Download pdf artifacts
      uses: actions/download-artifact@v4
      with:
        name: pdf
        path: pdf/

    - name: Generate auxiliary files
      run: ./build.sh gen ${{ inputs.release && '--release' || '' }}

    - name: Initialize web tools
      run: ./web/build.sh init

    - name: Build 'web'
      run: ./web/build.sh build ${{ inputs.release && '--release' || '' }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web
        path: web/public

  build-r:
    runs-on: ubuntu-24.04
    container: rocker/verse:4.5.1
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      shell: bash
      run: |
        set -euo pipefail
        tlmgr update --self
        tlmgr install amsfonts

    - name: Check package
      run: ./r/build.sh check

    - name: Build package
      run: ./r/build.sh build

    - name: Test package
      run: ./r/build.sh test

    - name: Upload r artifacts
      uses: actions/upload-artifact@v4
      with:
        name: r
        path: 'r/*.tar.gz'

  build-dotnet:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '9.0.305'

    - name: Build
      run: ./dotnet/build.sh build ${{ inputs.release && '--release' || '' }}

    - name: Test
      run: ./dotnet/build.sh test

    - name: Pack
      run: ./dotnet/build.sh pack ${{ inputs.release && '--release' || '' }}

    - name: Upload dotnet artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dotnet
        path: dotnet/artifacts

  build-python:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest build twine
      working-directory: python

    - name: Install package in development mode
      run: ./python/build.sh dev

    - name: Run tests
      run: ./python/build.sh test

    - name: Build package
      run: ./python/build.sh build

    - name: Check package
      run: ./python/build.sh check

    - name: Upload python artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python
        path: python/dist/

  build-rust:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: rust/pragmastat/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check package
      run: ./rust/build.sh check

    - name: Run tests
      run: ./rust/build.sh test

    - name: Build
      run: ./rust/build.sh build ${{ inputs.release && '--release' || '' }}

    - name: Package crate
      run: cargo package --verbose
      working-directory: rust/pragmastat

    - name: Upload rust artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rust
        path: rust/pragmastat/target/package/*.crate

  build-ts:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ts/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ts

    - name: Check formatting and linting
      run: ./ts/build.sh check

    - name: Run tests
      run: ./ts/build.sh test

    - name: Build TypeScript
      run: ./ts/build.sh build

    - name: Create tarball
      run: npm pack
      working-directory: ts

    - name: Upload ts artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ts
        path: ts/*.tgz

  build-go:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache-dependency-path: go/go.mod

    - name: Download dependencies
      run: ./go/build.sh deps

    - name: Check formatting
      run: |
        if [ -n "$(go fmt ./...)" ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          exit 1
        fi
      working-directory: go

    - name: Run tests
      run: ./go/build.sh test-verbose

    - name: Run tests with coverage
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
      working-directory: go

    - name: Build
      run: ./go/build.sh build

    - name: Upload go artifacts
      uses: actions/upload-artifact@v4
      with:
        name: go
        path: go/

  build-kotlin:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      continue-on-error: true
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: kotlin

    - name: Build, test, and publish to staging (release mode)
      if: inputs.release
      run: ./gradlew publish --info --stacktrace
      working-directory: kotlin
      env:
        GRADLE_SIGNING_KEY: ${{ secrets.GRADLE_SIGNING_KEY }}
        GRADLE_SIGNING_PASSWORD: ${{ secrets.GRADLE_SIGNING_PASSWORD }}

    - name: Build and test (non-release mode)
      if: ${{ !inputs.release }}
      run: ./gradlew build --info --stacktrace
      working-directory: kotlin

    - name: Upload kotlin artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kotlin
        path: |
          kotlin/build/libs/
          kotlin/build/staging-deploy/
